// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id
  name               String
  email              String
  emailVerified      Boolean
  image              String?
  createdAt          DateTime
  updatedAt          DateTime
  sessions           Session[]
  accounts           Account[]
  role               Role                 @default(CREATOR)
  industry           String?
  SponsorListings    SponsorListing[]
  SponsorApplications SponsorApplication[]
  totalAudience      Int                  @default(0)
  socialLinks        String[]


  @@unique([email])
  @@map("user")
}

enum Role {
  SPONSOR
  CREATOR
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model SponsorListing {
  id                 String               @id @default(cuid())
  title              String
  companyName        String
  description        String?
  logo               String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  type               String
  budget             Int
  targetAudienceSize Int
  industry           String
  createdBy          String
  createdByUser      User                 @relation(fields: [createdBy], references: [id])
  applications       SponsorApplication[]
}

model SponsorApplication {
  id        String         @id @default(cuid())
  listingId String
  listing   SponsorListing @relation(fields: [listingId], references: [id])
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  note      String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}
